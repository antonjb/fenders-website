// REM font size with px fallback
@mixin font-size($sizeValue: 1.6) {
	font-size: ($sizeValue * 1) + px;
	font-size: ($sizeValue / 10) + rem;
}


// Reseting list menus
@mixin list-reset() {
	list-style: none;
	padding: 0;
	margin: 0;
	
	li {
		margin: 0;
		padding: 0;
	}
}


// REM font size with px fallback
@mixin font-size($sizeValue: 1.6) {
    font-size: ($sizeValue * 1) + px;
    font-size: ($sizeValue / 10) + rem;
}


// hover helper
@mixin hover() {
    html:not(.mobile):not(.tablet) &:hover,
    &.on_press {
        @content;
    }
}

@mixin vertical-align {
    position: relative;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
    display: block;
}

@mixin valign {
	display: flex;
    flex-direction: column;
    justify-content: center;
}

@mixin center {
	left: 0;
	right: 0;
	margin-left: auto;
	margin-right: auto;
}

@mixin clearfix {
	// Include on parent to clear nested columns
	&:before,
	&:after {
		content: '\0020';
		display: block;
		overflow: hidden;
		visibility: hidden;
		width: 0;
		height: 0; 
	}
	
	&:after {
		clear: both; 
	}
}

// grids!

@mixin grid($colCount, $gutterSize) {
	@include clearfix();
	margin-left: -$gutterSize;
		
	.col {
		float: left;
		padding-left: $gutterSize;
		width: (100/$colCount) * 1%;
		clear: none;
		display: inline-block;

		&:nth-child(#{$colCount}n+1) {
			clear: left;
		}
		
		&:not(:nth-child(#{$colCount}n+1)) {
			clear: none;
		}
	}
	
	@if $colCount == 1 {
		margin-left: 0;
		
		.col {
			padding-left: 0;
		}
	}
}

// flex box grids!

@mixin flex-grid($columnCount, $gutterSize, $bottomMargin) {
	display: flex;
	flex-wrap: wrap;
	flex-direction: row;
	justify-content: flex-start;
	margin-left: -$gutterSize;
		
	.col {
		padding-left: $gutterSize;
		margin-bottom: $bottomMargin;
		flex: 0 1 ((100/$columnCount) * 1%);
	}
	
	@if $columnCount == 1 {
		margin-left: 0;
		
		.col {
			padding-left: 0;
		}
	}
}

// Custom flexbox setup
// wrap - nowrap

@mixin flex-columns($isWrap) {
	display: flex;
	flex-wrap: $isWrap;
	flex-direction: row;
	justify-content: flex-start;
}


// breakpoints
@mixin breakpoint($min: 0, $max: 0, $side: 'width') {
    // check to see if first variable is string or number
    $type: type-of($min);
    $sideType: type-of($side);
        
    // if it's a number, check if min, max or both are required.
    // then check if the values of $side are correctly spelt 'width' or 'height'
    // write new breakpoint using these boundaries.
    // default to 'all' if nothing specified.
    @if $type == number and $sideType == string {
        @if $side == 'width' or $side == 'height' {
            $query: "all" !default;
            @if      $min != 0 and $max != 0 { $query: "(min-#{$side}: #{$min}) and (max-#{$side}: #{$max})"; } // set both min and max
            @else if $min != 0 and $max == 0 { $query: "(min-#{$side}: #{$min})"; } // set just min
            @else if $min == 0 and $max != 0 { $query: "(max-#{$side}: #{$max})"; } // set just max
            @media #{$query} { @content; }
        }
    }
}

@mixin icons() {
	font-family: "Icons";
	display: inline-block;
	vertical-align: middle;
	line-height: 1;
	font-weight: normal;
	font-style: normal;
	speak: none;
	text-decoration: inherit;
	text-transform: none;
	text-rendering: optimizeLegibility;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

@mixin hide {
	position: absolute;
	overflow: hidden;
	clip: rect(0 0 0 0);
	height: 1px;
	width: 1px;
	margin: -1px;
	padding: 0;
	border: 0;
}


// where null = delay (if required)
// This needs ot be expanded ot include multiple transitions on one object
// Next step below?
// https://coderwall.com/p/qviyew/sass-compass-manytransitions-mixin
// 

/*
@mixin transition($trans-type, $trans-speed, $trans-timing, null) {
	transition: $trans-type $trans-speed $trans-timing;
	will-change: $trans-type;
}
*/

@mixin trans-bg {
	transition: background 200ms ease;
}

@mixin trans-color {
	transition: color 200ms ease;
}

@mixin trans-padding {
	transition: padding 200ms ease;
}

@mixin trans-opacity {
	transition: opacity 200ms ease;
}

@mixin trans-transform {
	transition: transform 200ms ease-in-out;
}

@mixin trans-border {
	transition: border-color 200ms ease-in-out;
}

@mixin trans-all {
	transition: all 200ms ease;
}

@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

@mixin overlay-custom($color, $opacity) {
	
	&:before {
		@include trans-bg;
		position: absolute;
		width: 100%;
		height: 100%;
		background: rgba($color, $opacity);
		top: 0;
		left: 0;
		content: '';
	}
}

@mixin cover {
	background-size: cover;
	background-repeat: no-repeat;
	background-position: center;
}

@mixin float-l {
	display: inline-block;
	float: left;
}

@mixin float-r {
	display: inline-block;
	float: right;
}